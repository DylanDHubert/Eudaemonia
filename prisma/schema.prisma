generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  sessions      Session[]
  dailyEntries  DailyEntry[]
  customCategories CustomCategory[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CustomCategory {
  id          String   @id @default(cuid())
  name        String
  type        String   // 'numeric', 'scale', or 'boolean'
  min         Float?
  max         Float?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  entries     CustomCategoryEntry[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, name])
}

model CustomCategoryEntry {
  id              String   @id @default(cuid())
  value           Float
  dailyEntryId    String
  dailyEntry      DailyEntry @relation(fields: [dailyEntryId], references: [id], onDelete: Cascade)
  customCategoryId String
  customCategory  CustomCategory @relation(fields: [customCategoryId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([dailyEntryId, customCategoryId])
}

model DailyEntry {
  id           String   @id @default(cuid())
  date         DateTime @default(now())
  sleepHours   Float
  sleepQuality Int // 1-10 scale
  exercise     Boolean
  exerciseTime Int? // minutes
  alcohol      Boolean
  alcoholUnits Float? // standard drinks
  weed         Boolean
  weedAmount   Int? // scale 1-5
  meditation   Boolean
  meditationTime Int? // minutes
  socialTime   Float? // hours spent socializing
  workHours    Float?
  stressLevel  Int // 1-10 scale
  happinessRating Int // 1-10 scale
  notes        String? @db.Text
  
  // Food tracking fields
  meals        Int? // number of meals
  foodQuality  Int? // 1-10 scale
  
  userId       String
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  customCategoryEntries CustomCategoryEntry[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId, date])
} 